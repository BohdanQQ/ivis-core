'use strict';

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { translate } from 'react-i18next';
import { requiresAuthenticatedUser, withPageHelpers } from '../lib/page';
import { withErrorHandling, withAsyncErrorHandler } from '../lib/error-handling';
import {
    withForm, Form, FormSendMethod, TableSelect, ButtonRow, Button
} from '../lib/form';
import { Table } from '../lib/table';
import axios from '../lib/axios';
import {Panel} from "../lib/panel";

@translate()
@withForm
@withPageHelpers
@withErrorHandling
@requiresAuthenticatedUser
export default class ShareSensor extends Component {
    constructor(props) {
        super(props);

        this.initForm();
    }

    static propTypes = {
        title: PropTypes.string,
        entity: PropTypes.object,
        entityTypeId: PropTypes.string
    }

    @withAsyncErrorHandler
    async deleteShare(userId) {
        const data = {
            entityTypeId: this.props.entityTypeId,
            entityId: this.props.entity.id,
            sensorId
        };

        await axios.put('/rest/farmsensor', data);
        //this.sharesTable.refresh();
        this.sigSetTableSelect.refresh();
    }

    clearShareFields() {
        this.populateFormValues({
            entityTypeId: this.props.entityTypeId,
            entityId: this.props.entity.id,
            sensorId: null,
        });
    }

    componentDidMount() {
        this.clearShareFields();
    }

    localValidateFormValues(state) {
        const t = this.props.t;

        if (!state.getIn(['sensorId', 'value'])) {
            state.setIn(['sensorId', 'error'], t('Sensor must not be empty'));
        } else {
            state.setIn(['sensorId', 'error'], null);
        }
    }

    async submitHandler() {
        const t = this.props.t;

        this.disableForm();
        this.setFormStatusMessage('info', t('Saving ...'));

        const submitSuccessful = await this.validateAndSendFormValuesToURL(FormSendMethod.PUT, '/rest/farmsensor');

        if (submitSuccessful) {
            this.hideFormValidation();
            this.clearShareFields();
            this.enableForm();

            this.clearFormStatusMessage();
            //this.sharesTable.refresh();
            this.sigSetTableSelect.refresh();

        } else {
            this.enableForm();
            this.setFormStatusMessage('warning', t('There are errors in the form. Please fix them and try again.'));
        }
    }

    render() {
        const t = this.props.t;

        const sharesColumns = [];
        sharesColumns.push({ data: 0, title: t('Cid') });
        sharesColumns.push({ data: 1, title: t('Name') });
        sharesColumns.push({ data: 2, title: t('Description') });
        sharesColumns.push({ data: 3, title: t('Created') });
        sharesColumns.push({ data: 4, title: t('Namespace') });

        sharesColumns.push({
            actions: data => {
                const actions = [];
                const autoGenerated = data[5];

                if (!autoGenerated) {
                    actions.push({
                        label: 'Delete',
                        action: () => this.deleteShare(data[3])
                    });
                }

                return actions;
            }
        })

        let sigSetLabelIndex = 0;
        const sigSetColumns = [
            { data: 0, title: t('Id') },
            { data: 1, title: t('Name') },
            { data: 2, title: t('Description') },
            { data: 3, title: t('Created') },
            { data: 4, title: t('Namespace') },
            { data: 5, title: t('Cid') }    
        ]

        return (
            <Panel title={this.props.title}>
                <h3 className="legend">{t('Add Sensor')}</h3>
                <Form stateOwner={this} onSubmitAsync={::this.submitHandler}>
                    <TableSelect ref={node => this.sigSetTableSelect = node} id="sensorId" label={t('Sensors')} withHeader dropdown dataUrl={`/rest/farm-sensor-shares-unassigned-table/${this.props.entity.id}`} columns={sigSetColumns} selectionLabelIndex={sigSetLabelIndex} />

                    <ButtonRow>
                        <Button type="submit" className="btn-primary" icon="ok" label={t('Add')}/>
                    </ButtonRow>
                </Form>

                <hr/>
                <h3 className="legend">{t('Existing Sensors')}</h3>

            </Panel>
        );
    }
}
//                <Table ref={node => this.sharesTable = node} withHeader dataUrl={`/rest/farmsensorshares-table-by-entity/${this.props.entityTypeId}/${this.props.entity.id}`} columns={sharesColumns} />
